const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
  

    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });


    export const GenAiCode = model.startChat({
      generationConfig:CodeGenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Task Management App\",\n  \"explanation\": \"This project is a Task Management Application built with React, utilizing Tailwind CSS for styling, lucide-react for icons, date-fns for date formatting, and react-chartjs-2 for task completion graphs. The app allows users to add, edit, and delete tasks, categorize them, set due dates, track progress, and view their productivity visually. It provides a clean and user-friendly interface for managing daily or project-related activities.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskList from './components/TaskList';\\nimport AddTask from './components/AddTask';\\nimport TaskSummary from './components/TaskSummary';\\nimport { Home } from 'lucide-react';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 flex flex-col\\\">\\n      <header className=\\\"bg-blue-600 text-white p-4 flex justify-between items-center\\\">\\n          <div className='flex items-center gap-2'>\\n        <Home className='w-6 h-6'/>\\n        <h1 className=\\\"text-2xl font-bold\\\">Task Manager</h1>\\n          </div>\\n        \\n      </header>\\n      <main className=\\\"container mx-auto py-6 flex flex-col lg:flex-row gap-6 p-4\\\">\\n        <div className='lg:w-3/4'>\\n            <AddTask />\\n            <TaskList />\\n        </div>\\n        <div className='lg:w-1/4'>\\n            <TaskSummary/>\\n        </div>\\n      </main>\\n       <footer className=\\\"bg-gray-800 text-white text-center p-4\\\">\\n        &copy; {new Date().getFullYear()} Task Manager\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { Trash, Edit, Check, X, Clock, ArrowRight } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst TaskList = () => {\\n    const [tasks, setTasks] = useState(() => {\\n      const storedTasks = localStorage.getItem('tasks');\\n      return storedTasks ? JSON.parse(storedTasks) : [];\\n    });\\n    const [editingTask, setEditingTask] = useState(null);\\n    const [editedTaskText, setEditedTaskText] = useState('');\\n    const [editedTaskDueDate, setEditedTaskDueDate] = useState('');\\n\\n    useEffect(() => {\\n        localStorage.setItem('tasks', JSON.stringify(tasks));\\n    }, [tasks]);\\n\\n    const handleEdit = (task) => {\\n        setEditingTask(task.id);\\n        setEditedTaskText(task.text);\\n        setEditedTaskDueDate(task.dueDate);\\n    };\\n\\n    const handleSaveEdit = (id) => {\\n      setTasks(tasks.map(task => {\\n          if (task.id === id) {\\n              return { ...task, text: editedTaskText, dueDate: editedTaskDueDate };\\n          }\\n          return task;\\n      }));\\n      setEditingTask(null);\\n      setEditedTaskText('');\\n      setEditedTaskDueDate('');\\n  };\\n\\n    const handleCancelEdit = () => {\\n        setEditingTask(null);\\n        setEditedTaskText('');\\n        setEditedTaskDueDate('');\\n    };\\n\\n\\n    const handleDelete = (id) => {\\n        setTasks(tasks.filter(task => task.id !== id));\\n    };\\n\\n  const handleToggleComplete = (id) => {\\n    setTasks(tasks.map(task => {\\n        if (task.id === id) {\\n            return { ...task, completed: !task.completed };\\n        }\\n        return task;\\n    }));\\n};\\n\\n    return (\\n        <div className=\\\"bg-white shadow rounded-md p-4\\\">\\n          <h2 className=\\\"text-xl font-semibold mb-4 flex items-center gap-2\\\">Task List <ArrowRight className='w-5 h-5'/></h2>\\n          {tasks.length === 0 ? (\\n               <div className='text-gray-500 text-center py-4'>No tasks added yet.</div>\\n                ) :( \\n            <ul className=\\\"space-y-2\\\">\\n                {tasks.map(task => (\\n                    <li key={task.id} className=\\\"p-3 border rounded-md flex justify-between items-center relative\\\">\\n                        {editingTask === task.id ? (\\n                          <div className='flex flex-col w-full'>\\n                            <input\\n                            type='text'\\n                            value={editedTaskText}\\n                            onChange={(e) => setEditedTaskText(e.target.value)}\\n                            className='border p-2 rounded mb-2 w-full'  placeholder='Task Description'/>\\n                            <input\\n                            type='date'\\n                            value={editedTaskDueDate}\\n                            onChange={(e) => setEditedTaskDueDate(e.target.value)}\\n                            className='border p-2 rounded mb-2 w-full'/>\\n                            <div className='flex gap-2'>\\n                            <button className='bg-green-500 hover:bg-green-700 text-white p-2 rounded' onClick={() => handleSaveEdit(task.id)}>Save</button>\\n                            <button className='bg-red-500 hover:bg-red-700 text-white p-2 rounded'  onClick={handleCancelEdit}>Cancel</button>\\n                            </div>\\n                            </div>\\n                        ) : (\\n                           <div className='flex items-center gap-3 w-full'>\\n                            <div className={`flex-1 ${task.completed ? 'line-through text-gray-500' : ''}`}>\\n                               <h3 className='font-medium'>{task.text}</h3>\\n                               {task.dueDate && <p className='text-sm text-gray-500 flex items-center gap-1'><Clock className='w-3 h-3'/> Due Date : {format(new Date(task.dueDate), 'MMM dd, yyyy')}</p>}\\n                           </div>\\n\\n                            <div className='flex gap-2'>\\n                            <button onClick={() => handleToggleComplete(task.id)}  className='p-2 hover:bg-gray-100 rounded-full'>  {task.completed ? <X className='w-4 h-4 text-green-600'/> :<Check className='w-4 h-4 text-gray-500'/>  }</button>\\n                            <button onClick={() => handleEdit(task)} className='p-2 hover:bg-gray-100 rounded-full'><Edit className='w-4 h-4 text-gray-500'/></button>\\n                            <button onClick={() => handleDelete(task.id)} className='p-2 hover:bg-gray-100 rounded-full'><Trash className='w-4 h-4 text-red-500'/></button>\\n                               </div>\\n                           </div>\\n                        )}\\n\\n\\n                    </li>\\n                ))}\\n            </ul>\\n             )}\\n        </div>\\n    );\\n};\\n\\nexport default TaskList;\"\n    },\n    \"/components/AddTask.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst AddTask = () => {\\n    const [taskText, setTaskText] = useState('');\\n    const [dueDate, setDueDate] = useState('');\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n\\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n        if (!taskText) return;\\n        const newTask = {\\n          id: Date.now(),\\n          text: taskText,\\n            dueDate: dueDate,\\n          completed: false\\n        };\\n        setTasks([...tasks, newTask]);\\n        setTaskText('');\\n          setDueDate('');\\n    };\\n\\n  \\n\\n    return (\\n        <div className=\\\"bg-white shadow rounded-md p-4 mb-6\\\">\\n           <h2 className=\\\"text-xl font-semibold mb-4 flex items-center gap-2\\\">Add New Task <Plus className='w-5 h-5'/></h2>\\n            <form onSubmit={handleSubmit} className='flex flex-col gap-4'>\\n                <input\\n                    type=\\\"text\\\"\\n                    placeholder=\\\"Task description\\\"\\n                    value={taskText}\\n                    onChange={(e) => setTaskText(e.target.value)}\\n                    className=\\\"border p-2 rounded w-full\\\"\\n                  />\\n                 <input\\n                    type=\\\"date\\\"\\n                    placeholder=\\\"Due date\\\"\\n                    value={dueDate}\\n                    onChange={(e) => setDueDate(e.target.value)}\\n                    className=\\\"border p-2 rounded w-full\\\"\\n                  />\\n\\n                <button type='submit' className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'>Add Task</button>\\n            </form>\\n        </div>\\n    );\\n};\\n\\nexport default AddTask;\"\n    },\n    \"/components/TaskSummary.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { Bar } from 'react-chartjs-2';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement } from 'chart.js';\\n\\nChartJS.register(CategoryScale, LinearScale, BarElement);\\n\\nconst TaskSummary = () => {\\n    const [tasks, setTasks] = useState(() => {\\n        const storedTasks = localStorage.getItem('tasks');\\n        return storedTasks ? JSON.parse(storedTasks) : [];\\n      });\\n\\n    const totalTasks = tasks.length;\\n    const completedTasks = tasks.filter(task => task.completed).length;\\n    const pendingTasks = totalTasks - completedTasks;\\n\\n    const chartData = {\\n      labels: ['Completed', 'Pending'],\\n      datasets: [\\n        {\\n          label: 'Task Status',\\n          data: [completedTasks, pendingTasks],\\n          backgroundColor: ['#22c55e', '#f43f5e'],\\n          borderColor: ['#22c55e', '#f43f5e'],\\n          borderWidth: 1,\\n        },\\n      ],\\n    };\\n  \\n      const chartOptions = {\\n        responsive: true,\\n         maintainAspectRatio: false,\\n        scales: {\\n          y: {\\n              beginAtZero: true,\\n              ticks: { stepSize: 1}\\n          }\\n        },\\n    };\\n\\n\\n    return (\\n        <div className=\\\"bg-white shadow rounded-md p-4\\\">\\n          <h2 className=\\\"text-xl font-semibold mb-4 flex items-center gap-2\\\">Task Summary</h2>\\n            <div className='h-72'>\\n            <Bar data={chartData} options={chartOptions} />\\n             </div>\\n             <div className='mt-4'>\\n            <p className='flex justify-between'><span className='font-semibold'>Total Tasks: </span> <span>{totalTasks}</span></p>\\n             <p className='flex justify-between'><span className='font-semibold'>Completed Tasks: </span> <span>{completedTasks}</span></p>\\n             <p className='flex justify-between'><span className='font-semibold'>Pending Tasks: </span> <span>{pendingTasks}</span></p>\\n        </div>\\n        </div>\\n    );\\n};\\n\\nexport default TaskSummary;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskList.js\",\n    \"/components/AddTask.js\",\n    \"/components/TaskSummary.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
    })
  
    //const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
   // console.log(result.response.text());
